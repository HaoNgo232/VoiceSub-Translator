#!/usr/bin/env python3
"""
Ứng dụng tạo và dịch phụ đề video.
"""

import os
import argparse
import logging
from pathlib import Path

from src import APIHandler, SubtitleProcessor, main as gui_main

# Cấu hình logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def setup_environment():
    """Kiểm tra và thiết lập môi trường."""
    # Kiểm tra file .env
    if not os.path.exists('.env'):
        logger.error("Không tìm thấy file .env")
        return False
        
    # Kiểm tra các thư mục cần thiết
    os.makedirs('output', exist_ok=True)
    os.makedirs('logs', exist_ok=True)
    
    return True

def process_subtitles(input_path: str, output_path: str, target_lang: str = 'vi', service: str = 'google'):
    """Xử lý phụ đề."""
    try:
        # Khởi tạo các handler
        api_handler = APIHandler()
        subtitle_processor = SubtitleProcessor(api_handler)
        
        # Xử lý file hoặc thư mục
        if os.path.isfile(input_path):
            if not input_path.endswith('.srt'):
                logger.error("File đầu vào phải là file .srt")
                return False
                
            success = subtitle_processor.process_subtitle_file(
                input_path,
                output_path,
                target_lang,
                service
            )
            
            if success:
                logger.info(f"Đã xử lý thành công file {input_path}")
                return True
            else:
                logger.error(f"Không thể xử lý file {input_path}")
                return False
                
        elif os.path.isdir(input_path):
            results = subtitle_processor.process_directory(
                input_path,
                output_path,
                target_lang,
                service
            )
            
            logger.info(f"Kết quả xử lý thư mục:")
            logger.info(f"Tổng số file: {results['total']}")
            logger.info(f"Thành công: {results['success']}")
            logger.info(f"Thất bại: {results['failed']}")
            
            return results['failed'] == 0
            
        else:
            logger.error(f"Đường dẫn không hợp lệ: {input_path}")
            return False
            
    except Exception as e:
        logger.error(f"Lỗi khi xử lý phụ đề: {str(e)}")
        return False

def main():
    """Hàm chính."""
    parser = argparse.ArgumentParser(description='Công cụ xử lý và dịch phụ đề')
    parser.add_argument('input', help='Đường dẫn đến file hoặc thư mục phụ đề')
    parser.add_argument('--output', '-o', help='Đường dẫn đầu ra', default='output')
    parser.add_argument('--lang', '-l', help='Ngôn ngữ đích', default='vi')
    parser.add_argument('--service', '-s', help='Dịch vụ dịch thuật', default='google',
                      choices=['google', 'novita', 'mistral', 'groq', 'openrouter', 'cerebras'])
    
    args = parser.parse_args()
    
    # Kiểm tra môi trường
    if not setup_environment():
        return
        
    # Xử lý phụ đề
    success = process_subtitles(
        args.input,
        args.output,
        args.lang,
        args.service
    )
    
    if success:
        logger.info("Hoàn thành xử lý phụ đề")
    else:
        logger.error("Có lỗi xảy ra khi xử lý phụ đề")

if __name__ == "__main__":
    main() 