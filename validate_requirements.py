#!/usr/bin/env python3
"""
Validate Requirements.txt
Ki·ªÉm tra c√∫ ph√°p v√† format c·ªßa file requirements.txt
"""

import re
import os

def validate_package_line(line: str, line_num: int) -> tuple[bool, str]:
    """Validate m·ªôt d√≤ng package trong requirements.txt"""
    line = line.strip()
    
    # B·ªè qua comment v√† d√≤ng tr·ªëng
    if not line or line.startswith('#'):
        return True, ""
    
    # Pattern cho package name v√† version spec
    # V√≠ d·ª•: package>=1.0.0, package==1.0.0, package
    pattern = r'^([a-zA-Z0-9_-]+)([<>=!~]+[0-9a-zA-Z._-]+)?$'
    
    match = re.match(pattern, line)
    if not match:
        return False, f"D√≤ng {line_num}: Format kh√¥ng h·ª£p l·ªá - '{line}'"
    
    package_name = match.group(1)
    version_spec = match.group(2) if match.group(2) else ""
    
    # Ki·ªÉm tra package name
    if not package_name or len(package_name) < 1:
        return False, f"D√≤ng {line_num}: T√™n package kh√¥ng h·ª£p l·ªá - '{package_name}'"
    
    # Ki·ªÉm tra version spec n·∫øu c√≥
    if version_spec:
        version_pattern = r'^[<>=!~]+[0-9a-zA-Z._-]+$'
        if not re.match(version_pattern, version_spec):
            return False, f"D√≤ng {line_num}: Version spec kh√¥ng h·ª£p l·ªá - '{version_spec}'"
    
    return True, ""

def validate_requirements_file(file_path: str = "requirements.txt") -> tuple[bool, list[str]]:
    """Validate to√†n b·ªô file requirements.txt"""
    errors = []
    
    if not os.path.exists(file_path):
        errors.append(f"File {file_path} kh√¥ng t·ªìn t·∫°i")
        return False, errors
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        print(f"üìã ƒêang validate {len(lines)} d√≤ng trong {file_path}...")
        
        for i, line in enumerate(lines, 1):
            is_valid, error_msg = validate_package_line(line, i)
            if not is_valid:
                errors.append(error_msg)
        
        return len(errors) == 0, errors
        
    except Exception as e:
        errors.append(f"L·ªói khi ƒë·ªçc file: {e}")
        return False, errors

def analyze_requirements(file_path: str = "requirements.txt"):
    """Ph√¢n t√≠ch file requirements.txt"""
    if not os.path.exists(file_path):
        print(f"‚ùå File {file_path} kh√¥ng t·ªìn t·∫°i")
        return
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        lines = content.split('\n')
        
        # Th·ªëng k√™
        total_lines = len(lines)
        comment_lines = sum(1 for line in lines if line.strip().startswith('#'))
        empty_lines = sum(1 for line in lines if not line.strip())
        package_lines = total_lines - comment_lines - empty_lines
        
        print(f"üìä Th·ªëng k√™ file {file_path}:")
        print(f"   T·ªïng s·ªë d√≤ng: {total_lines}")
        print(f"   D√≤ng comment: {comment_lines}")
        print(f"   D√≤ng tr·ªëng: {empty_lines}")
        print(f"   D√≤ng package: {package_lines}")
        
        # Ph√¢n lo·∫°i packages
        packages = []
        for line in lines:
            line = line.strip()
            if line and not line.startswith('#'):
                package_name = line.split('>=')[0].split('==')[0].split('<=')[0].split('!=')[0].split('~=')[0].strip()
                packages.append(package_name)
        
        print(f"\nüì¶ Danh s√°ch packages ({len(packages)}):")
        for i, package in enumerate(packages, 1):
            print(f"   {i:2d}. {package}")
        
        return packages
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ph√¢n t√≠ch file: {e}")
        return []

def main():
    """H√†m ch√≠nh"""
    print("üîç Validate Requirements.txt")
    print("=" * 40)
    
    # Validate file
    is_valid, errors = validate_requirements_file()
    
    if is_valid:
        print("‚úÖ File requirements.txt h·ª£p l·ªá!")
    else:
        print("‚ùå File requirements.txt c√≥ l·ªói:")
        for error in errors:
            print(f"   {error}")
    
    print()
    
    # Ph√¢n t√≠ch file
    packages = analyze_requirements()
    
    print()
    if is_valid:
        print("üéâ Validation ho√†n t·∫•t th√†nh c√¥ng!")
        print(f"üì¶ T·ªïng c·ªông {len(packages)} packages ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a")
    else:
        print("‚ö†Ô∏è  Vui l√≤ng s·ª≠a c√°c l·ªói tr∆∞·ªõc khi s·ª≠ d·ª•ng")

if __name__ == "__main__":
    main()