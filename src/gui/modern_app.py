import sys
import os
import json
import threading
from pathlib import Path
from typing import Dict, Optional
import shutil

# Th√™m th∆∞ m·ª•c g·ªëc v√†o ƒë∆∞·ªùng d·∫´n Python
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

def check_display_available():
    """Ki·ªÉm tra xem c√≥ display server n√†o kh·∫£ d·ª•ng kh√¥ng"""
    try:
        # Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng DISPLAY
        if 'DISPLAY' not in os.environ:
            return False
        
        # Th·ª≠ import v√† t·∫°o m·ªôt tkinter widget ƒë∆°n gi·∫£n
        import tkinter as tk
        test_root = tk.Tk()
        test_root.withdraw()  # ·∫®n c·ª≠a s·ªï
        test_root.destroy()   # X√≥a c·ª≠a s·ªï
        return True
    except Exception:
        return False

def setup_virtual_display():
    """H∆∞·ªõng d·∫´n thi·∫øt l·∫≠p virtual display"""
    print("\n" + "="*60)
    print("üñ•Ô∏è  ·ª®NG D·ª§NG GUI - C·∫¶N THI·∫æT L·∫¨P DISPLAY")
    print("="*60)
    print("\n·ª®ng d·ª•ng n√†y c·∫ßn display server ƒë·ªÉ ch·∫°y giao di·ªán ƒë·ªì h·ªça.")
    print("\nüìã H∆Ø·ªöNG D·∫™N THI·∫æT L·∫¨P:")
    print("\n1Ô∏è‚É£  C√†i ƒë·∫∑t Xvfb (Virtual Display):")
    print("   sudo apt-get update")
    print("   sudo apt-get install -y xvfb")
    print("\n2Ô∏è‚É£  Ch·∫°y ·ª©ng d·ª•ng v·ªõi virtual display:")
    print("   xvfb-run -a python run.py")
    print("\n3Ô∏è‚É£  Ho·∫∑c thi·∫øt l·∫≠p DISPLAY th·ªß c√¥ng:")
    print("   export DISPLAY=:99")
    print("   Xvfb :99 -screen 0 1024x768x24 &")
    print("   python run.py")
    print("\n4Ô∏è‚É£  ƒê·ªÉ xem giao di·ªán t·ª´ xa (n·∫øu c·∫ßn):")
    print("   - C√†i ƒë·∫∑t VNC server")
    print("   - Ho·∫∑c s·ª≠ d·ª•ng X11 forwarding qua SSH")
    print("\nüí° L∆ØU √ù:")
    print("   - ·ª®ng d·ª•ng n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ch·∫°y tr√™n desktop")
    print("   - Trong m√¥i tr∆∞·ªùng server, b·∫°n c√≥ th·ªÉ c·∫ßn CLI alternative")
    print("\n" + "="*60 + "\n")

# Ki·ªÉm tra display availability tr∆∞·ªõc khi import GUI
if not check_display_available():
    # N·∫øu kh√¥ng c√≥ display, import minimal components ƒë·ªÉ tr√°nh l·ªói
    print("‚ö†Ô∏è  Kh√¥ng ph√°t hi·ªán display server")
else:
    try:
        import customtkinter as ctk
        from tkinter import filedialog, messagebox
        from src.gui.subtitle_processor import SubtitleProcessor
        from src.gui.components.progress_window import ProgressWindow
        from src.gui.components.modern_error_handler import ModernErrorHandler, show_success_notification, show_warning_dialog
        from src.utils.subtitle_management import backup_original_subtitles, restore_original_subtitles
        from src.utils.transcription import ENGINE_OPENAI_WHISPER, ENGINE_FASTER_WHISPER

        # C·∫•u h√¨nh CustomTkinter
        ctk.set_appearance_mode("dark")  # Ch·∫ø ƒë·ªô: "dark", "light", "system"
        ctk.set_default_color_theme("blue")  # Ch·ªß ƒë·ªÅ: "blue", "green", "dark-blue"
    except Exception as e:
        print(f"‚ö†Ô∏è  L·ªói import GUI components: {e}")
        # Fallback - treat as no display available
        check_display_available = lambda: False

class ModernSubtitleApp:
    """·ª®ng d·ª•ng x·ª≠ l√Ω ph·ª• ƒë·ªÅ v·ªõi giao di·ªán hi·ªán ƒë·∫°i"""
    
    def __init__(self):
        self.root = ctk.CTk()
        self.root.title("C√¥ng c·ª• x·ª≠ l√Ω ph·ª• ƒë·ªÅ - Phi√™n b·∫£n hi·ªán ƒë·∫°i")
        self.root.geometry("1200x800")
        self.root.minsize(1000, 700)
        
        # Bi·∫øn l∆∞u tr·ªØ
        self.prompts: Dict[str, str] = {}
        self.current_prompt: Optional[str] = None
        self.input_folder: Optional[str] = None
        self.output_folder: Optional[str] = None
        
        # T·∫£i prompts t·ª´ file
        self.load_prompts()
        
        # T·∫°o giao di·ªán
        self.create_widgets()
        
        # Setup keyboard shortcuts
        self.setup_keyboard_shortcuts()
        
        # C·∫•u h√¨nh grid
        self.root.grid_columnconfigure(0, weight=1)
        self.root.grid_rowconfigure(0, weight=1)
        
    def load_prompts(self):
        """T·∫£i prompts t·ª´ file config"""
        config_path = Path("config/prompts.json")
        if config_path.exists():
            with open(config_path, "r", encoding="utf-8") as f:
                self.prompts = json.load(f)
        else:
            # Prompt m·∫∑c ƒë·ªãnh
            self.prompts = {
                "default": """Translate the following text to {target_lang}. 
IMPORTANT INSTRUCTIONS:
1. Only return the translated text, without any explanations or notes
2. Keep the original format and timing information
3. Keep technical terms and IT concepts in English (e.g. API, CPU, RAM, etc.)
4. Keep certification names in English (e.g. CISP, CISM, etc.)
5. Keep company names in English
6. Keep product names in English
7. Keep programming languages and frameworks in English
8. Keep file extensions in English
9. Keep commands and code snippets in English

Text to translate:
{text}"""
            }
            # T·∫°o th∆∞ m·ª•c config n·∫øu ch∆∞a t·ªìn t·∫°i
            config_path.parent.mkdir(parents=True, exist_ok=True)
            # L∆∞u prompts m·∫∑c ƒë·ªãnh
            with open(config_path, "w", encoding="utf-8") as f:
                json.dump(self.prompts, f, indent=4, ensure_ascii=False)
        
        self.current_prompt = "default"
        
    def save_prompts(self):
        """L∆∞u prompts v√†o file config"""
        config_path = Path("config/prompts.json")
        with open(config_path, "w", encoding="utf-8") as f:
            json.dump(self.prompts, f, indent=4, ensure_ascii=False)
            
    def create_widgets(self):
        """T·∫°o c√°c widget cho giao di·ªán"""
        # Configure main window grid for two-column layout
        self.root.grid_columnconfigure(0, weight=3)  # Main content
        self.root.grid_columnconfigure(1, weight=1)  # Sidebar
        self.root.grid_rowconfigure(0, weight=1)
        
        # Main content frame with scrollbar
        main_frame = ctk.CTkScrollableFrame(self.root, fg_color="transparent")
        main_frame.grid(row=0, column=0, sticky="nsew", padx=(20, 10), pady=20)
        main_frame.grid_columnconfigure(0, weight=1)
        
        # Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
        title_label = ctk.CTkLabel(
            main_frame, 
            text="üé¨ C√¥ng c·ª• x·ª≠ l√Ω ph·ª• ƒë·ªÅ", 
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color="#4CAF50"
        )
        title_label.grid(row=0, column=0, pady=(0, 30), sticky="ew")
        
        # Ph·∫ßn ch·ªçn th∆∞ m·ª•c v·ªõi drag-and-drop
        from src.gui.components.modern_file_selection import ModernFileSelectionPanel
        self.file_selection = ModernFileSelectionPanel(main_frame)
        self.file_selection.grid(row=1, column=0, sticky="ew", pady=(0, 20))
        
        # Link variables for backward compatibility
        self.input_folder_var = self.file_selection.input_folder_var
        self.output_folder_var = self.file_selection.output_folder_var
        self.save_same_folder_var = self.file_selection.save_same_folder_var
        
        # Ph·∫ßn c·∫•u h√¨nh transcription
        transcription_frame = ctk.CTkFrame(main_frame, fg_color="#2B2B2B")
        transcription_frame.grid(row=2, column=0, sticky="ew", pady=(0, 20))
        transcription_frame.grid_columnconfigure(1, weight=1)
        transcription_frame.grid_columnconfigure(3, weight=1)
        
        # Ti√™u ƒë·ªÅ section
        transcription_title = ctk.CTkLabel(
            transcription_frame, 
            text="‚öôÔ∏è C·∫•u h√¨nh t·∫°o ph·ª• ƒë·ªÅ", 
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#FF9800"
        )
        transcription_title.grid(row=0, column=0, columnspan=4, pady=(15, 20), sticky="ew")
        
        # Engine
        ctk.CTkLabel(transcription_frame, text="Engine:", font=ctk.CTkFont(size=14)).grid(
            row=1, column=0, sticky="w", padx=15, pady=10
        )
        self.engine_var = ctk.StringVar(value=ENGINE_OPENAI_WHISPER)
        engine_combo = ctk.CTkOptionMenu(
            transcription_frame, 
            variable=self.engine_var,
            values=[ENGINE_OPENAI_WHISPER, ENGINE_FASTER_WHISPER],
            height=35,
            command=self.on_engine_selected
        )
        engine_combo.grid(row=1, column=1, sticky="ew", padx=15, pady=10)
        
        # Model cho OpenAI Whisper
        ctk.CTkLabel(transcription_frame, text="OpenAI Model:", font=ctk.CTkFont(size=14)).grid(
            row=1, column=2, sticky="w", padx=15, pady=10
        )
        self.whisper_model_var = ctk.StringVar(value="base.en")
        whisper_model_combo = ctk.CTkOptionMenu(
            transcription_frame, 
            variable=self.whisper_model_var,
            values=["tiny.en", "base.en", "small.en"],
            height=35
        )
        whisper_model_combo.grid(row=1, column=3, sticky="ew", padx=15, pady=10)
        
        # Model cho Faster Whisper
        ctk.CTkLabel(transcription_frame, text="Faster-Whisper Model:", font=ctk.CTkFont(size=14)).grid(
            row=2, column=0, sticky="w", padx=15, pady=10
        )
        self.faster_model_var = ctk.StringVar(value="base")
        faster_model_combo = ctk.CTkOptionMenu(
            transcription_frame, 
            variable=self.faster_model_var,
            values=["tiny", "base", "small", "medium", "large-v3", "distil-large-v3"],
            height=35
        )
        faster_model_combo.grid(row=2, column=1, sticky="ew", padx=15, pady=10)
        
        # Compute Type
        ctk.CTkLabel(transcription_frame, text="Precision:", font=ctk.CTkFont(size=14)).grid(
            row=2, column=2, sticky="w", padx=15, pady=10
        )
        self.compute_type_var = ctk.StringVar(value="float16")
        compute_type_combo = ctk.CTkOptionMenu(
            transcription_frame, 
            variable=self.compute_type_var,
            values=["float16", "float32", "int8", "int8_float16"],
            height=35
        )
        compute_type_combo.grid(row=2, column=3, sticky="ew", padx=15, pady=10)
        
        # Device
        ctk.CTkLabel(transcription_frame, text="Device:", font=ctk.CTkFont(size=14)).grid(
            row=3, column=0, sticky="w", padx=15, pady=10
        )
        self.device_var = ctk.StringVar(value="cuda")
        device_combo = ctk.CTkOptionMenu(
            transcription_frame, 
            variable=self.device_var,
            values=["cuda", "cpu"],
            height=35
        )
        device_combo.grid(row=3, column=1, sticky="ew", padx=15, pady=10)
        
        # Ph·∫ßn qu·∫£n l√Ω prompts
        prompt_frame = ctk.CTkFrame(main_frame, fg_color="#2B2B2B")
        prompt_frame.grid(row=3, column=0, sticky="ew", pady=(0, 20))
        prompt_frame.grid_columnconfigure(1, weight=1)
        
        # Ti√™u ƒë·ªÅ section
        prompt_title = ctk.CTkLabel(
            prompt_frame, 
            text="‚úçÔ∏è Qu·∫£n l√Ω Prompts", 
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#9C27B0"
        )
        prompt_title.grid(row=0, column=0, columnspan=5, pady=(15, 20), sticky="ew")
        
        # Ch·ªçn prompt
        ctk.CTkLabel(prompt_frame, text="Ch·ªçn prompt:", font=ctk.CTkFont(size=14)).grid(
            row=1, column=0, sticky="w", padx=15, pady=10
        )
        self.prompt_var = ctk.StringVar(value=self.current_prompt)
        prompt_combo = ctk.CTkOptionMenu(
            prompt_frame, 
            variable=self.prompt_var,
            values=list(self.prompts.keys()),
            height=35,
            command=self.on_prompt_selected
        )
        prompt_combo.grid(row=1, column=1, sticky="ew", padx=15, pady=10)
        
        # N√∫t th√™m/s·ª≠a/x√≥a prompt
        ctk.CTkButton(
            prompt_frame, 
            text="‚ûï Th√™m m·ªõi", 
            command=self.add_prompt,
            height=35,
            fg_color="#4CAF50",
            hover_color="#45A049"
        ).grid(row=1, column=2, padx=5, pady=10)
        
        ctk.CTkButton(
            prompt_frame, 
            text="‚úèÔ∏è S·ª≠a", 
            command=self.edit_prompt,
            height=35,
            fg_color="#2196F3",
            hover_color="#1976D2"
        ).grid(row=1, column=3, padx=5, pady=10)
        
        ctk.CTkButton(
            prompt_frame, 
            text="üóëÔ∏è X√≥a", 
            command=self.delete_prompt,
            height=35,
            fg_color="#F44336",
            hover_color="#D32F2F"
        ).grid(row=1, column=4, padx=5, pady=10)
        
        # Hi·ªÉn th·ªã n·ªôi dung prompt
        ctk.CTkLabel(prompt_frame, text="N·ªôi dung prompt:", font=ctk.CTkFont(size=14)).grid(
            row=2, column=0, sticky="w", padx=15, pady=(20, 10)
        )
        self.prompt_text = ctk.CTkTextbox(
            prompt_frame, 
            height=120, 
            width=70,
            font=ctk.CTkFont(size=12)
        )
        self.prompt_text.grid(row=3, column=0, columnspan=5, sticky="ew", padx=15, pady=(0, 15))
        self.prompt_text.insert("1.0", self.prompts[self.current_prompt])
        
        # Ph·∫ßn n√∫t ƒëi·ªÅu khi·ªÉn ch√≠nh
        control_frame = ctk.CTkFrame(main_frame, fg_color="#2B2B2B")
        control_frame.grid(row=4, column=0, sticky="ew", pady=(0, 20))
        control_frame.grid_columnconfigure(0, weight=1)
        
        # Ti√™u ƒë·ªÅ section
        control_title = ctk.CTkLabel(
            control_frame, 
            text="üéØ Thao t√°c ch√≠nh", 
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#FF5722"
        )
        control_title.grid(row=0, column=0, columnspan=5, pady=(15, 20), sticky="ew")
        
        # Frame ch·ª©a c√°c n√∫t
        button_frame = ctk.CTkFrame(control_frame, fg_color="transparent")
        button_frame.grid(row=1, column=0, pady=(0, 15))
        
        # C√°c n√∫t ch√≠nh
        generate_btn = ctk.CTkButton(
            button_frame, 
            text="üé¨ T·∫°o ph·ª• ƒë·ªÅ", 
            command=self.generate_subtitles,
            height=45,
            width=180,
            fg_color="#4CAF50",
            hover_color="#45A049",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        generate_btn.pack(side="left", padx=10)
        
        translate_btn = ctk.CTkButton(
            button_frame, 
            text="üåê D·ªãch ph·ª• ƒë·ªÅ", 
            command=self.translate_subtitles,
            height=45,
            width=180,
            fg_color="#2196F3",
            hover_color="#1976D2",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        translate_btn.pack(side="left", padx=10)
        
        clone_btn = ctk.CTkButton(
            button_frame, 
            text="üìã Sao ch√©p ph·ª• ƒë·ªÅ", 
            command=self.clone_subtitles,
            height=45,
            width=180,
            fg_color="#FF9800",
            hover_color="#F57C00",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        clone_btn.pack(side="left", padx=10)
        
        # Frame ch·ª©a c√°c n√∫t ph·ª•
        button_frame2 = ctk.CTkFrame(control_frame, fg_color="transparent")
        button_frame2.grid(row=2, column=0, pady=(0, 15))
        
        manage_btn = ctk.CTkButton(
            button_frame2, 
            text="üíæ Qu·∫£n l√Ω ph·ª• ƒë·ªÅ g·ªëc", 
            command=self.manage_original_subtitles,
            height=40,
            width=180,
            fg_color="#9C27B0",
            hover_color="#7B1FA2",
            font=ctk.CTkFont(size=14)
        )
        manage_btn.pack(side="left", padx=10)
        
        convert_btn = ctk.CTkButton(
            button_frame2, 
            text="üîÑ Chuy·ªÉn ƒë·ªïi ph·ª• ƒë·ªÅ", 
            command=self.convert_subtitles,
            height=40,
            width=180,
            fg_color="#607D8B",
            hover_color="#455A64",
            font=ctk.CTkFont(size=14)
        )
        convert_btn.pack(side="left", padx=10)
        
        settings_btn = ctk.CTkButton(
            button_frame2, 
            text="‚öôÔ∏è C√†i ƒë·∫∑t", 
            command=self.open_settings,
            height=40,
            width=180,
            fg_color="#795548",
            hover_color="#5D4037",
            font=ctk.CTkFont(size=14)
        )
        settings_btn.pack(side="left", padx=10)
        
        # Add tooltips after creating sidebar
        self.root.after(100, lambda: self.add_tooltips(generate_btn, translate_btn, clone_btn, manage_btn, convert_btn, settings_btn))
        
        # Status bar
        self.status_label = ctk.CTkLabel(
            main_frame, 
            text="‚úÖ S·∫µn s√†ng s·ª≠ d·ª•ng", 
            font=ctk.CTkFont(size=12),
            text_color="#4CAF50"
        )
        self.status_label.grid(row=6, column=0, pady=(20, 0), sticky="ew")
        
        # Add subtitle preview panel on the right
        self.add_sidebar_preview()
        
    def on_engine_selected(self, value):
        """X·ª≠ l√Ω khi ch·ªçn engine"""
        if value == ENGINE_FASTER_WHISPER:
            self.compute_type_var.set("float32")
            
    def on_prompt_selected(self, value):
        """X·ª≠ l√Ω khi ch·ªçn prompt t·ª´ combobox"""
        if value in self.prompts:
            self.current_prompt = value
            self.prompt_text.delete("1.0", "end")
            self.prompt_text.insert("1.0", self.prompts[value])
            
    def add_prompt(self):
        """Th√™m prompt m·ªõi"""
        # T·∫°o dialog ƒë∆°n gi·∫£n
        dialog = ctk.CTkToplevel(self.root)
        dialog.title("Th√™m prompt m·ªõi")
        dialog.geometry("500x400")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Widgets
        ctk.CTkLabel(dialog, text="T√™n prompt:", font=ctk.CTkFont(size=14)).pack(pady=10)
        name_entry = ctk.CTkEntry(dialog, width=400, height=35)
        name_entry.pack(pady=5)
        
        ctk.CTkLabel(dialog, text="N·ªôi dung prompt:", font=ctk.CTkFont(size=14)).pack(pady=10)
        content_text = ctk.CTkTextbox(dialog, width=400, height=200)
        content_text.pack(pady=5)
        
        def save_prompt():
            name = name_entry.get().strip()
            content = content_text.get("1.0", "end").strip()
            if name and content:
                self.prompts[name] = content
                self.prompt_var.set(name)
                self.current_prompt = name
                self.prompt_text.delete("1.0", "end")
                self.prompt_text.insert("1.0", content)
                self.save_prompts()
                dialog.destroy()
                self.status_label.configure(text=f"‚úÖ ƒê√£ th√™m prompt: {name}")
            else:
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin")
                
        ctk.CTkButton(
            dialog, 
            text="L∆∞u", 
            command=save_prompt,
            fg_color="#4CAF50",
            hover_color="#45A049"
        ).pack(pady=20)
                
    def edit_prompt(self):
        """S·ª≠a prompt hi·ªán t·∫°i"""
        name = self.prompt_var.get()
        if name in self.prompts:
            content = self.prompt_text.get("1.0", "end").strip()
            
            # T·∫°o dialog t∆∞∆°ng t·ª± add_prompt
            dialog = ctk.CTkToplevel(self.root)
            dialog.title("S·ª≠a prompt")
            dialog.geometry("500x400")
            dialog.transient(self.root)
            dialog.grab_set()
            
            # Widgets
            ctk.CTkLabel(dialog, text="T√™n prompt:", font=ctk.CTkFont(size=14)).pack(pady=10)
            name_entry = ctk.CTkEntry(dialog, width=400, height=35)
            name_entry.insert(0, name)
            name_entry.pack(pady=5)
            
            ctk.CTkLabel(dialog, text="N·ªôi dung prompt:", font=ctk.CTkFont(size=14)).pack(pady=10)
            content_text = ctk.CTkTextbox(dialog, width=400, height=200)
            content_text.insert("1.0", content)
            content_text.pack(pady=5)
            
            def save_changes():
                new_name = name_entry.get().strip()
                new_content = content_text.get("1.0", "end").strip()
                if new_name and new_content:
                    if new_name != name:
                        del self.prompts[name]
                    self.prompts[new_name] = new_content
                    self.prompt_var.set(new_name)
                    self.current_prompt = new_name
                    self.prompt_text.delete("1.0", "end")
                    self.prompt_text.insert("1.0", new_content)
                    self.save_prompts()
                    dialog.destroy()
                    self.status_label.configure(text=f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t prompt: {new_name}")
                else:
                    messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin")
                    
            ctk.CTkButton(
                dialog, 
                text="L∆∞u thay ƒë·ªïi", 
                command=save_changes,
                fg_color="#4CAF50",
                hover_color="#45A049"
            ).pack(pady=20)
                    
    def delete_prompt(self):
        """X√≥a prompt hi·ªán t·∫°i"""
        name = self.prompt_var.get()
        if name != "default" and name in self.prompts:
            if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a prompt '{name}'?"):
                del self.prompts[name]
                self.prompt_var.set("default")
                self.current_prompt = "default"
                self.prompt_text.delete("1.0", "end")
                self.prompt_text.insert("1.0", self.prompts["default"])
                self.save_prompts()
                self.status_label.configure(text=f"üóëÔ∏è ƒê√£ x√≥a prompt: {name}")

    def generate_subtitles(self):
        """T·∫°o ph·ª• ƒë·ªÅ cho video v·ªõi error handling hi·ªán ƒë·∫°i"""
        input_folder = self.input_folder_var.get()
        save_same_folder = self.save_same_folder_var.get()
        output_folder = self.output_folder_var.get()
        
        # Validation with modern error handling
        if not input_folder:
            show_warning_dialog(
                self.root,
                "Thi·∫øu th√¥ng tin",
                "Vui l√≤ng ch·ªçn th∆∞ m·ª•c ch·ª©a video tr∆∞·ªõc khi t·∫°o ph·ª• ƒë·ªÅ.",
                ["Nh·∫•n v√†o khu v·ª±c 'K√©o th·∫£ th∆∞ m·ª•c v√†o ƒë√¢y'", "Ho·∫∑c nh·∫•n n√∫t 'Ch·ªçn th∆∞ m·ª•c'"]
            )
            return
            
        if not save_same_folder and not output_folder:
            show_warning_dialog(
                self.root,
                "Thi·∫øu th∆∞ m·ª•c ƒë·∫ßu ra",
                "Vui l√≤ng ch·ªçn th∆∞ m·ª•c ƒë·∫ßu ra ho·∫∑c ch·ªçn 'L∆∞u ph·ª• ƒë·ªÅ c√πng v·ªã tr√≠ v·ªõi video'.",
                ["B·∫≠t t√πy ch·ªçn 'L∆∞u ph·ª• ƒë·ªÅ c√πng v·ªã tr√≠ v·ªõi video'", "Ho·∫∑c ch·ªçn th∆∞ m·ª•c ƒë·∫ßu ra c·ª• th·ªÉ"]
            )
            return
            
        # Check if input folder exists
        if not os.path.exists(input_folder):
            show_warning_dialog(
                self.root,
                "Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i",
                f"Th∆∞ m·ª•c '{input_folder}' kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã di chuy·ªÉn.",
                ["Ch·ªçn l·∫°i th∆∞ m·ª•c ƒë·∫ßu v√†o", "Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c"]
            )
            return
            
        # X√°c ƒë·ªãnh model d·ª±a v√†o engine
        engine = self.engine_var.get()
        model_name = self.whisper_model_var.get() if engine == ENGINE_OPENAI_WHISPER else self.faster_model_var.get()
        
        self.status_label.configure(text="üîÑ ƒêang t·∫°o ph·ª• ƒë·ªÅ...", text_color="#FF9800")
        
        # T·∫°o progress window
        progress_window = ProgressWindow(self.root)
        processor = SubtitleProcessor(progress_window.update)
        
        # Ch·∫°y x·ª≠ l√Ω trong thread ri√™ng v·ªõi error handling
        def process():
            def execute_generation():
                output_path = None if save_same_folder else output_folder
                return processor.process_videos(
                    input_folder,
                    output_path,
                    generate=True,
                    translate=False,
                    engine=engine,
                    model_name=model_name,
                    device=self.device_var.get(),
                    compute_type=self.compute_type_var.get()
                )
            
            def on_success(result):
                progress_window.close()
                show_success_notification(
                    self.root,
                    "T·∫°o ph·ª• ƒë·ªÅ th√†nh c√¥ng",
                    "ƒê√£ t·∫°o ph·ª• ƒë·ªÅ cho t·∫•t c·∫£ video!"
                )
                self.status_label.configure(text="‚úÖ ƒê√£ t·∫°o ph·ª• ƒë·ªÅ th√†nh c√¥ng!", text_color="#4CAF50")
                
            def on_error(error):
                progress_window.close()
                self.status_label.configure(text="‚ùå L·ªói khi t·∫°o ph·ª• ƒë·ªÅ", text_color="#F44336")
            
            ModernErrorHandler.safe_execute(
                self.root,
                execute_generation,
                context="ƒêang t·∫°o ph·ª• ƒë·ªÅ t·ª´ video",
                success_callback=on_success,
                error_callback=on_error
            )
        
        threading.Thread(target=process, daemon=True).start()
        
    def translate_subtitles(self):
        """M·ªü dialog d·ªãch ph·ª• ƒë·ªÅ hi·ªán ƒë·∫°i"""
        input_folder = self.input_folder_var.get()
        save_same_folder = self.save_same_folder_var.get()
        output_folder = self.output_folder_var.get()
        
        # Validation with modern error handling
        if not input_folder:
            show_warning_dialog(
                self.root,
                "Thi·∫øu th√¥ng tin",
                "Vui l√≤ng ch·ªçn th∆∞ m·ª•c ch·ª©a ph·ª• ƒë·ªÅ tr∆∞·ªõc khi d·ªãch.",
                ["Nh·∫•n v√†o khu v·ª±c 'K√©o th·∫£ th∆∞ m·ª•c v√†o ƒë√¢y'", "Ho·∫∑c nh·∫•n n√∫t 'Ch·ªçn th∆∞ m·ª•c'"]
            )
            return
            
        if not save_same_folder and not output_folder:
            show_warning_dialog(
                self.root,
                "Thi·∫øu th∆∞ m·ª•c ƒë·∫ßu ra",
                "Vui l√≤ng ch·ªçn th∆∞ m·ª•c ƒë·∫ßu ra ho·∫∑c ch·ªçn 'L∆∞u ph·ª• ƒë·ªÅ c√πng v·ªã tr√≠ v·ªõi video'.",
                ["B·∫≠t t√πy ch·ªçn 'L∆∞u ph·ª• ƒë·ªÅ c√πng v·ªã tr√≠ v·ªõi video'", "Ho·∫∑c ch·ªçn th∆∞ m·ª•c ƒë·∫ßu ra c·ª• th·ªÉ"]
            )
            return
            
        # Check if input folder exists
        if not os.path.exists(input_folder):
            show_warning_dialog(
                self.root,
                "Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i",
                f"Th∆∞ m·ª•c '{input_folder}' kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã di chuy·ªÉn.",
                ["Ch·ªçn l·∫°i th∆∞ m·ª•c ƒë·∫ßu v√†o", "Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c"]
            )
            return

        # Import the modern translation dialog
        from src.gui.components.modern_translation_dialog import ModernTranslationDialog
        
        # Create status update callback
        def update_status(text: str, color: str):
            self.status_label.configure(text=text, text_color=color)
        
        # Open the modern translation dialog
        ModernTranslationDialog(
            self.root, 
            input_folder, 
            output_folder, 
            save_same_folder,
            status_callback=update_status
        )

    def clone_subtitles(self):
        """Sao ch√©p to√†n b·ªô file .srt t·ª´ input sang output, gi·ªØ nguy√™n c·∫•u tr√∫c th∆∞ m·ª•c"""
        if not self.input_folder_var.get():
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c ƒë·∫ßu v√†o")
            return
        if not self.output_folder_var.get():
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c ƒë·∫ßu ra")
            return

        input_folder = self.input_folder_var.get()
        output_folder = self.output_folder_var.get()
        
        self.status_label.configure(text="üîÑ ƒêang sao ch√©p ph·ª• ƒë·ªÅ...", text_color="#FF9800")
        
        def process():
            try:
                count = 0
                for root, _, files in os.walk(input_folder):
                    for file in files:
                        if file.lower().endswith(".srt"):
                            rel_path = os.path.relpath(os.path.join(root, file), input_folder)
                            dest_path = os.path.join(output_folder, rel_path)
                            os.makedirs(os.path.dirname(dest_path), exist_ok=True)
                            shutil.copy2(os.path.join(root, file), dest_path)
                            count += 1
                
                self.root.after(0, lambda: messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ sao ch√©p {count} file ph·ª• ƒë·ªÅ .srt sang th∆∞ m·ª•c output!"))
                self.root.after(0, lambda: self.status_label.configure(text=f"‚úÖ ƒê√£ sao ch√©p {count} file ph·ª• ƒë·ªÅ", text_color="#4CAF50"))
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror("L·ªói", str(e)))
                self.root.after(0, lambda: self.status_label.configure(text="‚ùå L·ªói khi sao ch√©p ph·ª• ƒë·ªÅ", text_color="#F44336"))
                
        threading.Thread(target=process, daemon=True).start()
        
    def manage_original_subtitles(self):
        """M·ªü c·ª≠a s·ªï qu·∫£n l√Ω ph·ª• ƒë·ªÅ g·ªëc"""
        if not self.input_folder_var.get():
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c ƒë·∫ßu v√†o")
            return
            
        # T·∫°o c·ª≠a s·ªï dialog hi·ªán ƒë·∫°i
        dialog = ctk.CTkToplevel(self.root)
        dialog.title("Qu·∫£n l√Ω ph·ª• ƒë·ªÅ g·ªëc")
        dialog.geometry("600x400")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # T·∫°o c√°c widget
        main_frame = ctk.CTkFrame(dialog)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Ti√™u ƒë·ªÅ
        ctk.CTkLabel(
            main_frame, 
            text="üíæ Qu·∫£n l√Ω ph·ª• ƒë·ªÅ g·ªëc", 
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#9C27B0"
        ).pack(pady=(0, 20))
        
        # T·ª± ƒë·ªông t·∫°o ƒë∆∞·ªùng d·∫´n backup m·∫∑c ƒë·ªãnh t·ª´ th∆∞ m·ª•c ƒë·∫ßu v√†o
        default_backup = os.path.join(self.input_folder_var.get(), "backup_subtitles")
        
        # Th∆∞ m·ª•c backup
        backup_frame = ctk.CTkFrame(main_frame)
        backup_frame.pack(fill="x", pady=10)
        
        ctk.CTkLabel(backup_frame, text="Th∆∞ m·ª•c backup:", font=ctk.CTkFont(size=14)).pack(anchor="w", padx=15, pady=5)
        
        backup_folder_var = ctk.StringVar(value=default_backup)
        backup_entry = ctk.CTkEntry(backup_frame, textvariable=backup_folder_var, width=400, height=35)
        backup_entry.pack(side="left", padx=15, pady=10)
        
        def select_backup_folder():
            folder = filedialog.askdirectory()
            if folder:
                backup_folder_var.set(folder)
                
        ctk.CTkButton(
            backup_frame, 
            text="Ch·ªçn", 
            command=select_backup_folder,
            height=35,
            fg_color="#4CAF50",
            hover_color="#45A049"
        ).pack(side="right", padx=15, pady=10)
        
        # Ng√¥n ng·ªØ ƒë√≠ch
        lang_frame = ctk.CTkFrame(main_frame)
        lang_frame.pack(fill="x", pady=10)
        
        ctk.CTkLabel(lang_frame, text="Ng√¥n ng·ªØ ƒë√≠ch:", font=ctk.CTkFont(size=14)).pack(anchor="w", padx=15, pady=5)
        
        target_lang_var = ctk.StringVar(value="vi")
        lang_entry = ctk.CTkEntry(lang_frame, textvariable=target_lang_var, width=100, height=35)
        lang_entry.pack(side="left", padx=15, pady=10)
        
        # M√¥ t·∫£
        desc_frame = ctk.CTkFrame(main_frame)
        desc_frame.pack(fill="x", pady=10)
        
        description = """
Ch·ª©c nƒÉng n√†y s·∫Ω x√≥a c√°c ph·ª• ƒë·ªÅ g·ªëc c·ªßa video ƒë√£ c√≥ ph·ª• ƒë·ªÅ d·ªãch v√† sao l∆∞u ch√∫ng v√†o th∆∞ m·ª•c backup.
ƒêi·ªÅu n√†y gi√∫p gi·∫£m s·ª± th·ª´a th√£i khi b·∫°n ch·ªâ c·∫ßn s·ª≠ d·ª•ng ph·ª• ƒë·ªÅ ƒë√£ d·ªãch.

B·∫°n c√≥ th·ªÉ kh√¥i ph·ª•c ph·ª• ƒë·ªÅ g·ªëc t·ª´ th∆∞ m·ª•c backup b·∫•t k·ª≥ l√∫c n√†o.
        """
        
        desc_label = ctk.CTkLabel(
            desc_frame, 
            text=description, 
            justify="left", 
            wraplength=550,
            font=ctk.CTkFont(size=12)
        )
        desc_label.pack(padx=15, pady=15)
        
        # Frame ch·ª©a c√°c n√∫t
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(pady=20)
        
        def backup_subtitles():
            input_folder = self.input_folder_var.get()
            backup_folder = backup_folder_var.get()
            target_lang = target_lang_var.get()
            
            progress_window = ProgressWindow(dialog)
            
            def process():
                try:
                    stats = backup_original_subtitles(input_folder, backup_folder, target_lang)
                    
                    msg = f"""K·∫øt qu·∫£ x·ª≠ l√Ω:
- T·ªïng s·ªë ph·ª• ƒë·ªÅ g·ªëc: {stats['total']}
- S·ªë ph·ª• ƒë·ªÅ ƒë√£ sao l∆∞u v√† x√≥a: {stats['backed_up']}
- S·ªë ph·ª• ƒë·ªÅ b·ªè qua (kh√¥ng c√≥ b·∫£n d·ªãch): {stats['skipped']}
- S·ªë video kh√¥ng c√≥ ph·ª• ƒë·ªÅ: {stats['no_subtitle']}
                    """
                    
                    progress_window.close()
                    dialog.after(0, lambda: messagebox.showinfo("Th√†nh c√¥ng", msg))
                except Exception as e:
                    progress_window.close()
                    dialog.after(0, lambda: messagebox.showerror("L·ªói", str(e)))
                    
            threading.Thread(target=process, daemon=True).start()
            
        def restore_subtitles():
            input_folder = self.input_folder_var.get()
            backup_folder = backup_folder_var.get()
            
            if not os.path.exists(backup_folder):
                messagebox.showerror("L·ªói", f"Th∆∞ m·ª•c backup '{backup_folder}' kh√¥ng t·ªìn t·∫°i")
                return
                
            progress_window = ProgressWindow(dialog)
            
            def process():
                try:
                    stats = restore_original_subtitles(input_folder, backup_folder)
                    
                    msg = f"""K·∫øt qu·∫£ kh√¥i ph·ª•c:
- S·ªë ph·ª• ƒë·ªÅ ƒë√£ kh√¥i ph·ª•c: {stats['restored']}
- S·ªë kh√¥i ph·ª•c th·∫•t b·∫°i: {stats['failed']}
                    """
                    
                    progress_window.close()
                    dialog.after(0, lambda: messagebox.showinfo("Th√†nh c√¥ng", msg))
                except Exception as e:
                    progress_window.close()
                    dialog.after(0, lambda: messagebox.showerror("L·ªói", str(e)))
                    
            threading.Thread(target=process, daemon=True).start()
            
        ctk.CTkButton(
            button_frame, 
            text="üíæ Sao l∆∞u v√† x√≥a ph·ª• ƒë·ªÅ g·ªëc", 
            command=backup_subtitles,
            height=40,
            fg_color="#9C27B0",
            hover_color="#7B1FA2"
        ).pack(side="left", padx=10)
        
        ctk.CTkButton(
            button_frame, 
            text="üîÑ Kh√¥i ph·ª•c ph·ª• ƒë·ªÅ g·ªëc", 
            command=restore_subtitles,
            height=40,
            fg_color="#607D8B",
            hover_color="#455A64"
        ).pack(side="left", padx=10)
        
        ctk.CTkButton(
            button_frame, 
            text="‚ùå ƒê√≥ng", 
            command=dialog.destroy,
            height=40,
            fg_color="#F44336",
            hover_color="#D32F2F"
        ).pack(side="left", padx=10)
        
    def add_sidebar_preview(self):
        """Add subtitle preview sidebar"""
        # Import and create preview panel
        from src.gui.components.subtitle_preview import SubtitlePreviewPanel
        
        # Create sidebar frame
        sidebar_frame = ctk.CTkFrame(self.root, fg_color="#1A1A1A")
        sidebar_frame.grid(row=0, column=1, sticky="nsew", padx=(10, 20), pady=20)
        sidebar_frame.grid_columnconfigure(0, weight=1)
        sidebar_frame.grid_rowconfigure(0, weight=1)
        
        # Add preview panel
        self.preview_panel = SubtitlePreviewPanel(sidebar_frame, height=600)
        self.preview_panel.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)
        
    def setup_keyboard_shortcuts(self):
        """Setup keyboard shortcuts for better UX"""
        # Bind keyboard shortcuts
        self.root.bind('<Control-g>', lambda e: self.generate_subtitles())  # Ctrl+G for Generate
        self.root.bind('<Control-t>', lambda e: self.translate_subtitles())  # Ctrl+T for Translate
        self.root.bind('<Control-o>', lambda e: self.file_selection.input_drag_frame.browse_folder())  # Ctrl+O for Open
        self.root.bind('<Control-s>', lambda e: self.open_settings())  # Ctrl+S for Settings
        self.root.bind('<Control-p>', lambda e: self.preview_panel.select_subtitle_file())  # Ctrl+P for Preview
        self.root.bind('<F1>', lambda e: self.show_help())  # F1 for Help
        self.root.bind('<F5>', lambda e: self.refresh_interface())  # F5 for Refresh
        
        # Focus the root window to capture keyboard events
        self.root.focus_set()
        
    def open_settings(self):
        """Open modern settings dialog"""
        from src.gui.components.modern_settings_dialog import ModernSettingsDialog
        ModernSettingsDialog(self.root)
        
    def show_help(self):
        """Show help dialog with keyboard shortcuts"""
        help_dialog = ctk.CTkToplevel(self.root)
        help_dialog.title("üìñ Tr·ª£ gi√∫p")
        help_dialog.geometry("500x400")
        help_dialog.transient(self.root)
        help_dialog.grab_set()
        
        # Center dialog
        help_dialog.update_idletasks()
        width = help_dialog.winfo_width()
        height = help_dialog.winfo_height()
        x = (help_dialog.winfo_screenwidth() // 2) - (width // 2)
        y = (help_dialog.winfo_screenheight() // 2) - (height // 2)
        help_dialog.geometry(f"{width}x{height}+{x}+{y}")
        
        main_frame = ctk.CTkScrollableFrame(help_dialog, fg_color="#1A1A1A")
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Title
        ctk.CTkLabel(
            main_frame,
            text="üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#4CAF50"
        ).pack(pady=(0, 20))
        
        # Keyboard shortcuts
        shortcuts_frame = ctk.CTkFrame(main_frame, fg_color="#2B2B2B")
        shortcuts_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkLabel(
            shortcuts_frame,
            text="‚å®Ô∏è Ph√≠m t·∫Øt",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#FF9800"
        ).pack(pady=(15, 10))
        
        shortcuts = [
            ("Ctrl + G", "T·∫°o ph·ª• ƒë·ªÅ"),
            ("Ctrl + T", "D·ªãch ph·ª• ƒë·ªÅ"),
            ("Ctrl + O", "Ch·ªçn th∆∞ m·ª•c ƒë·∫ßu v√†o"),
            ("Ctrl + S", "M·ªü c√†i ƒë·∫∑t"),
            ("Ctrl + P", "Ch·ªçn file xem tr∆∞·ªõc"),
            ("F1", "Hi·ªán tr·ª£ gi√∫p"),
            ("F5", "L√†m m·ªõi giao di·ªán")
        ]
        
        for shortcut, description in shortcuts:
            shortcut_frame = ctk.CTkFrame(shortcuts_frame, fg_color="transparent")
            shortcut_frame.pack(fill="x", padx=15, pady=2)
            
            ctk.CTkLabel(
                shortcut_frame,
                text=shortcut,
                font=ctk.CTkFont(size=12, weight="bold"),
                text_color="#2196F3",
                width=80
            ).pack(side="left")
            
            ctk.CTkLabel(
                shortcut_frame,
                text=description,
                font=ctk.CTkFont(size=12),
                text_color="#E0E0E0"
            ).pack(side="left", padx=(10, 0))
            
        ctk.CTkLabel(shortcuts_frame, text="", height=10).pack()
        
        # Usage tips
        tips_frame = ctk.CTkFrame(main_frame, fg_color="#2B2B2B")
        tips_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkLabel(
            tips_frame,
            text="üí° M·∫πo s·ª≠ d·ª•ng",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#4CAF50"
        ).pack(pady=(15, 10))
        
        tips = [
            "‚Ä¢ K√©o th·∫£ th∆∞ m·ª•c tr·ª±c ti·∫øp v√†o khu v·ª±c ch·ªçn file",
            "‚Ä¢ S·ª≠ d·ª•ng panel xem tr∆∞·ªõc ƒë·ªÉ ki·ªÉm tra ph·ª• ƒë·ªÅ",
            "‚Ä¢ T√πy ch·ªânh c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh ƒë·ªÉ ti·∫øt ki·ªám th·ªùi gian",
            "‚Ä¢ D√πng d·ªãch v·ª• AI kh√°c nhau cho k·∫øt qu·∫£ t·ªët nh·∫•t",
            "‚Ä¢ Backup prompt quan tr·ªçng ƒë·ªÉ t√°i s·ª≠ d·ª•ng"
        ]
        
        for tip in tips:
            ctk.CTkLabel(
                tips_frame,
                text=tip,
                font=ctk.CTkFont(size=11),
                text_color="#E0E0E0",
                wraplength=400,
                justify="left"
            ).pack(anchor="w", padx=15, pady=2)
            
        ctk.CTkLabel(tips_frame, text="", height=10).pack()
        
        # Close button
        ctk.CTkButton(
            main_frame,
            text="‚úÖ ƒê√≥ng",
            command=help_dialog.destroy,
            height=40,
            fg_color="#4CAF50",
            hover_color="#45A049"
        ).pack(pady=20)
        
    def refresh_interface(self):
        """Refresh the interface"""
        # Update preview panel if exists
        if hasattr(self, 'preview_panel'):
            self.preview_panel.refresh_preview()
            
        # Update status
        self.status_label.configure(text="üîÑ ƒê√£ l√†m m·ªõi giao di·ªán", text_color="#4CAF50")
        
        # Reset status after 2 seconds
        self.root.after(2000, lambda: self.status_label.configure(
            text="‚úÖ S·∫µn s√†ng s·ª≠ d·ª•ng", text_color="#4CAF50"
        ))
        
    def add_tooltips(self, generate_btn, translate_btn, clone_btn, manage_btn, convert_btn, settings_btn):
        """Add tooltips to buttons for better UX"""
        from src.gui.components.modern_tooltip import ModernButtonTooltip
        
        # Add tooltips with keyboard shortcuts
        ModernButtonTooltip(
            generate_btn,
            "T·∫°o ph·ª• ƒë·ªÅ t·ª´ video b·∫±ng AI\nH·ªó tr·ª£ nhi·ªÅu ƒë·ªãnh d·∫°ng video ph·ªï bi·∫øn",
            "Ctrl+G"
        )
        
        ModernButtonTooltip(
            translate_btn,
            "D·ªãch ph·ª• ƒë·ªÅ sang ng√¥n ng·ªØ kh√°c\nS·ª≠ d·ª•ng AI translation v·ªõi nhi·ªÅu d·ªãch v·ª•",
            "Ctrl+T"
        )
        
        ModernButtonTooltip(
            clone_btn,
            "Sao ch√©p t·∫•t c·∫£ file ph·ª• ƒë·ªÅ .srt\nGi·ªØ nguy√™n c·∫•u tr√∫c th∆∞ m·ª•c"
        )
        
        ModernButtonTooltip(
            manage_btn,
            "Qu·∫£n l√Ω ph·ª• ƒë·ªÅ g·ªëc\nBackup v√† kh√¥i ph·ª•c ph·ª• ƒë·ªÅ"
        )
        
        ModernButtonTooltip(
            convert_btn,
            "Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ph·ª• ƒë·ªÅ\nH·ªó tr·ª£ VTT, ASS sang SRT"
        )
        
        ModernButtonTooltip(
            settings_btn,
            "M·ªü c√†i ƒë·∫∑t ·ª©ng d·ª•ng\nT√πy ch·ªânh c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh",
            "Ctrl+S"
        )
        
    def convert_subtitles(self):
        """M·ªü c·ª≠a s·ªï chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ph·ª• ƒë·ªÅ"""
        from src.gui.components.modern_convert_dialog import ModernConvertDialog
        ModernConvertDialog(self.root)
        
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        self.root.mainloop()

def main():
    """Ch·∫°y ·ª©ng d·ª•ng ch√≠nh"""
    if not check_display_available():
        setup_virtual_display()
        return
        
    try:
        app = ModernSubtitleApp()
        app.run()
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {str(e)}")
        print("\nüîß C√≥ th·ªÉ th·ª≠ c√°c gi·∫£i ph√°p sau:")
        print("1. Ki·ªÉm tra l·∫°i display server")
        print("2. Ch·∫°y v·ªõi xvfb-run: xvfb-run -a python run.py") 
        print("3. Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng DISPLAY")
        setup_virtual_display()

if __name__ == "__main__":
    main()