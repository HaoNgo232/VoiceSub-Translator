"""
Legacy Adapter - Gi√∫p migration t·ª´ old translator sang Clean Architecture
Provides drop-in replacement cho existing code
"""

import logging
from src.integration import LegacyTranslatorAdapter as NewLegacyAdapter

logger = logging.getLogger(__name__)

# Drop-in replacement cho SubtitleTranslator c≈©
SubtitleTranslator = NewLegacyAdapter

# Migration helper message
def show_migration_notice():
    """Show migration notice for developers"""
    print("""
    üì¢ MIGRATION NOTICE:
    
    B·∫°n ƒëang d√πng legacy adapter cho SubtitleTranslator.
    Code hi·ªán t·∫°i s·∫Ω ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng, nh∆∞ng n√™n migrate sang Clean Architecture m·ªõi:
    
    OLD:
    from src.translator.subtitle import SubtitleTranslator
    
    NEW: 
    from src.integration import TranslationFacade
    
    Ho·∫∑c d√πng legacy adapter:
    from src.integration import LegacyTranslatorAdapter as SubtitleTranslator
    
    Benefits c·ªßa Clean Architecture:
    ‚úÖ Context-aware translation (ch·∫•t l∆∞·ª£ng d·ªãch t·ªët h∆°n)
    ‚úÖ Better caching & performance
    ‚úÖ More reliable error handling  
    ‚úÖ Easier to extend & maintain
    
    üìñ Xem MIGRATION_PLAN.md ƒë·ªÉ bi·∫øt chi ti·∫øt
    """)

# Auto-show notice when imported (ch·ªâ 1 l·∫ßn)
_migration_notice_shown = False

def _show_notice_once():
    global _migration_notice_shown
    if not _migration_notice_shown:
        logger.info("Using legacy adapter for SubtitleTranslator - see MIGRATION_PLAN.md")
        _migration_notice_shown = True

_show_notice_once()

__all__ = ['SubtitleTranslator', 'show_migration_notice']
